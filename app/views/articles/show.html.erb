<div class="container">
    <div class="row">
        <div class="col-xs-12 col-md-10 offset-md-1 col-lg-6 offset-lg-3">
            <% if not article.image.nil? and not article.image_file_name.nil? %>
                <%= image_tag @article.image.url(:large), class: 'img-fluid' %>
            <% end %>

            <h1 class="title">
                <%= @article.title %>
            </h1>

            <% if admin_signed_in? %>
                <% if @article.admin.nil? or current_admin.id == @article.admin.id %>
                    <%= link_to 'Edit', edit_article_path(@article) %> |
                    <%= link_to 'Delete', article_path(@article),
                              method: :delete,
                              data: { confirm: 'Are you sure?' } %>
                <% end %>
            <% end %>

            <p class="time">Submitted <%= time_ago_in_words(@article.created_at) %> ago</p>

            <% @components = @article.text.split(/\n+/) %>
            <% code_enabled = false %>
        <% @components.each do |comp| %><% if comp.start_with?('[IMAGE]') %><% comp.slice! '[IMAGE]' %><img src="<%= comp %>" class="img-fluid"><% elsif comp.start_with?('[CODE]') %><% comp.slice! '[CODE]' %>
<% code_enabled = true %><%=comp.html_safe%><% elsif code_enabled %><% if comp.include? "</pre>" %><% code_enabled = false %><%=comp.html_safe%><% else %><%=comp%>
    <% end %>
<% else %>
<p>
    <%= comp %>
</p>
<% end %>
<% end %>

            <br>
            <%= link_to articles_path do %>
                <button type="button" class="btn btn-secondary">Back</button>
            <% end %>
        </div>
    </div>
</div>

<script>
(function() {

if (typeof self === 'undefined' || !self.Prism || !self.document) {
return;
}

var assign = Object.assign || function (obj1, obj2) {
for (var name in obj2) {
    if (obj2.hasOwnProperty(name))
        obj1[name] = obj2[name];
}
return obj1;
}

function NormalizeWhitespace(defaults) {
this.defaults = assign({}, defaults);
}

function toCamelCase(value) {
return value.replace(/-(\w)/g, function(match, firstChar) {
    return firstChar.toUpperCase();
});
}

function tabLen(str) {
var res = 0;
for (var i = 0; i < str.length; ++i) {
    if (str.charCodeAt(i) == '\t'.charCodeAt(0))
        res += 3;
}
return str.length + res;
}

NormalizeWhitespace.prototype = {
setDefaults: function (defaults) {
    this.defaults = assign(this.defaults, defaults);
},
normalize: function (input, settings) {
    settings = assign(this.defaults, settings);

    for (var name in settings) {
        var methodName = toCamelCase(name);
        if (name !== "normalize" && methodName !== 'setDefaults' &&
                settings[name] && this[methodName]) {
            input = this[methodName].call(this, input, settings[name]);
        }
    }

    return input;
},

/*
 * Normalization methods
 */
leftTrim: function (input) {
    return input.replace(/^\s+/, '');
},
rightTrim: function (input) {
    return input.replace(/\s+$/, '');
},
tabsToSpaces: function (input, spaces) {
    spaces = spaces|0 || 4;
    return input.replace(/\t/g, new Array(++spaces).join(' '));
},
spacesToTabs: function (input, spaces) {
    spaces = spaces|0 || 4;
    return input.replace(new RegExp(' {' + spaces + '}', 'g'), '\t');
},
removeTrailing: function (input) {
    return input.replace(/\s*?$/gm, '');
},
// Support for deprecated plugin remove-initial-line-feed
removeInitialLineFeed: function (input) {
    return input.replace(/^(?:\r?\n|\r)/, '');
},
removeIndent: function (input) {
    var indents = input.match(/^[^\S\n\r]*(?=\S)/gm);

    if (!indents || !indents[0].length)
        return input;

    indents.sort(function(a, b){return a.length - b.length; });

    if (!indents[0].length)
        return input;

    return input.replace(new RegExp('^' + indents[0], 'gm'), '');
},
indent: function (input, tabs) {
    return input.replace(/^[^\S\n\r]*(?=\S)/gm, new Array(++tabs).join('\t') + '$&');
},
breakLines: function (input, characters) {
    characters = (characters === true) ? 80 : characters|0 || 80;

    var lines = input.split('\n');
    for (var i = 0; i < lines.length; ++i) {
        if (tabLen(lines[i]) <= characters)
            continue;

        var line = lines[i].split(/(\s+)/g),
            len = 0;

        for (var j = 0; j < line.length; ++j) {
            var tl = tabLen(line[j]);
            len += tl;
            if (len > characters) {
                line[j] = '\n' + line[j];
                len = tl;
            }
        }
        lines[i] = line.join('');
    }
    return lines.join('\n');
}
};

Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({
    'remove-trailing': true,
    'remove-indent': true,
    'left-trim': true,
    'right-trim': true,
    'indent': 0,
    'tabs-to-spaces': 4,
});

Prism.hooks.add('before-highlight', function (env) {
var pre = env.element.parentNode;
if (!env.code || !pre || pre.nodeName.toLowerCase() !== 'pre' ||
        (env.settings && env.settings['whitespace-normalization'] === false))
    return;

var children = pre.childNodes,
    before = '',
    after = '',
    codeFound = false,
    Normalizer = Prism.plugins.NormalizeWhitespace;

// Move surrounding whitespace from the <pre> tag into the <code> tag
for (var i = 0; i < children.length; ++i) {
    var node = children[i];

    if (node == env.element) {
        codeFound = true;
    } else if (node.nodeName === "#text") {
        if (codeFound) {
            after += node.nodeValue;
        } else {
            before += node.nodeValue;
        }

        pre.removeChild(node);
        --i;
    }
}

if (!env.element.children.length || !Prism.plugins.KeepMarkup) {
    env.code = before + env.code + after;
    env.code = Normalizer.normalize(env.code, env.settings);
} else {
    // Preserve markup for keep-markup plugin
    var html = before + env.element.innerHTML + after;
    env.element.innerHTML = Normalizer.normalize(html, env.settings);
    env.code = env.element.textContent;
}
});

}());
</script>
